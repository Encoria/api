name: Build and Deploy Spring Boot API to EC2 instance

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPO }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPO }}:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPO }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPO }}:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml"
          target: "/app"

      - name: Deploy on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /app
            
            cat > .env << EOF
            # Database config
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_PORT=${{ vars.POSTGRES_PORT }}
            
            # Spring Boot config
            SPRING_DATASOURCE_URL=jdbc:postgresql://db:${{ vars.POSTGRES_PORT }}/${{ secrets.POSTGRES_DB }}
            SPRING_DATASOURCE_USERNAME=${{ secrets.POSTGRES_USER }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            
            # Firebase config
            FIREBASE_PROJECT_ID=${{ vars.FIREBASE_PROJECT_ID }}
            FIREBASE_ISSUER=https://securetoken.google.com/${{ vars.FIREBASE_PROJECT_ID }}
            FIREBASE_JWK_URI=https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com
            FIREBASE_AUDIENCE=${{ vars.FIREBASE_PROJECT_ID }}
            
            # Docker image for deployment
            DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPO }}:${{ github.sha }}
            EOF
            
            chmod 600 .env
            
            docker-compose pull
            docker-compose up -d